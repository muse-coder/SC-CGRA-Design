import torch
import math
import  os
def TensorGenBitstream(rngSeq,tensorInputData,index,dataWidth = 8 ):
    len = rngSeq.size(0)
    quantizedata = (torch.round(tensorInputData / (2 ** (dataWidth - math.log2(len))))).to(rngSeq.device)


    singleBitstream = (quantizedata> rngSeq[index]).int()
    return singleBitstream



def tensorGenBitstreamSeries(rngSeq,tensorInputData,index,dataWidth = 8  ):
    length = len(rngSeq)
    tmp =((1<<(int(math.log2(length))+1))-1)
    shiftTime =dataWidth-int(math.log2(length))-1
    quantizeData_new = ((tmp << shiftTime) &tensorInputData) >> (shiftTime)
        # (torch.round(tensorInputData / (2 ** (dataWidth - math.log2(length))))).to(tensorInputData.device)

    quantizeData = (torch.round(tensorInputData / (2 ** (dataWidth - math.log2(length))))).to(tensorInputData.device)

    singleBitstreamMul = (quantizeData_new> (rngSeq[index]*2)).int()

    return singleBitstreamMul



def TensorLeftShiftBits(data,dataWidth):
    # 将张量转换为整数类型（如果是浮点数）
    # dataExceptZero = torch.where(data>0 , data, 2**dataWidth-1)
    dividedData = (2**dataWidth-1)/data
    log2Result =torch.log2(dividedData)
    log2ResultFloor = torch.floor(log2Result).to(torch.int8)
    return log2ResultFloor




def TensorEnlargeModule(tensorData, dataWidth):
    # leftShiftTimeTensor = dataWidth - TensorFindHighestOne(tensorData) - 1
    leftShiftTimeTensor = TensorLeftShiftBits(data= tensorData , dataWidth= dataWidth)
    enlargedNumberTensor = tensorData <<leftShiftTimeTensor

    return enlargedNumberTensor.to(torch.int32) , leftShiftTimeTensor

def matrixMulSeriesSC(tensorData_1 , tensorData_2 , SobolSeq1 , SobolSeq2, AscendingSeq , dataWidth , device):
    bitstreamLength = len(SobolSeq1)
    enlargedData_1 , dataLeftShiftTime_1 =  TensorEnlargeModule(tensorData=abs(tensorData_1), dataWidth=dataWidth)
    enlargedData_2 , dataLeftShiftTime_2 =  TensorEnlargeModule(tensorData=abs(tensorData_2), dataWidth=dataWidth)
    '''
    Begin:将数据维度转换成合适shape
    '''
    dataScaledFactor =(2**((2*dataWidth - math.log2(bitstreamLength) - dataLeftShiftTime_2 - dataLeftShiftTime_1).to(torch.float64))).to( torch.float64)

    # SCResult = torch.empty((dataShape_1[0],dataShape_2[1]),dtype=torch.float)
    res_Stochastic = torch.zeros_like(enlargedData_1).to(device).to(torch.float64)
    res_Unary = torch.zeros_like(enlargedData_1).to(device).to(torch.float64)
    tensor1 = torch.zeros_like(enlargedData_1).to(device).to(torch.int32)
    tensor2 = torch.zeros_like(enlargedData_2).to(device).to(torch.int32)
    tensor3 = torch.zeros_like(enlargedData_2).to(device).to(torch.int32)

    for i in range (bitstreamLength):
        tensorBit_1 = tensorGenBitstreamSeries(rngSeq = SobolSeq1 , tensorInputData= enlargedData_1 , index= i , dataWidth= dataWidth).to(device)
        tensorBit_2 = tensorGenBitstreamSeries(rngSeq = SobolSeq2 , tensorInputData= enlargedData_2 ,index= i , dataWidth= dataWidth).to(device)
        asendingBit_3 = tensorGenBitstreamSeries(rngSeq=AscendingSeq, tensorInputData=enlargedData_2, index=i,
                                               dataWidth=dataWidth).to(device)
        # tensor1 = tensor1.to((torch.int32)) + tensorBit_1.to((torch.int32))
        # tensor2 = tensor2.to((torch.int32)) + tensorBit_2.to((torch.int32))
        # tensor3 = tensor3.to((torch.int32)) + asendingBit_3.to((torch.int32))

        res_Stochastic = res_Stochastic + (torch.bitwise_and(tensorBit_1 , tensorBit_2)).to(torch.int32)
        res_Unary = res_Unary + (torch.bitwise_and(tensorBit_1 , asendingBit_3)).to(torch.int32)

    # tensor1 = tensor1.to(torch.float64) *(2**(dataWidth - math.log2(bitstreamLength)-dataLeftShiftTime_1))
    # tensor2 = tensor2.to(torch.float64) *(2**(dataWidth - math.log2(bitstreamLength)-dataLeftShiftTime_2))
    # tensor3 = tensor3.to(torch.float64) *(2**(dataWidth - math.log2(bitstreamLength)-dataLeftShiftTime_2))

    # if not torch.equal(tensor2, tensor3):
    #     diff_tensor = tensor2 != tensor3
    #     diff_values = tensor2[diff_tensor].tolist() + tensor3[diff_tensor].tolist()
    res_Unary  = res_Unary  * dataScaledFactor
    res_Unary  = res_Unary .to(torch.int32)

    res_Stochastic = res_Stochastic * dataScaledFactor
    res_Stochastic = res_Stochastic.to(torch.int32)
    return res_Stochastic , res_Unary

def calculate(SeqType,dataWidth):
    dim = (1<<dataWidth)-1
    partition = 64
    dim_1= int((dim+1)/partition)
    AED_base = 1<<(dataWidth*2)
    # dim_1= dim
    dim_2 = dim

    ascendingSeq = []
    for i in range(0,len(SeqType[0][0])):
        ascendingSeq.append(i)

    MREDGroup = []
    MEDGroup = []
    for tuples in SeqType:
        SC_REDsum = 0
        SC_AEDsum = 0
        Unary_REDsum = 0
        Unary_AEDsum = 0
        for i in range(0,partition):
            start = dim_1 * i
            end = dim_1 * (i+1)
            tensor1 = torch.arange(start+1, end+1,dtype=torch.int64).unsqueeze(1).expand(dim_1, dim_2).to(device)
            # tensor2 = torch.arange(1, dim + 1).unsqueeze(0).expand(int((dim+1)/64), dim)
            tensor2 = torch.arange(1, dim + 1,dtype=torch.int64).unsqueeze(0).expand(dim_1, dim_2).to(device)
            tensor1 = torch.where(tensor1<dim,tensor1,dim)
            (SCResult,UnaryResult )= matrixMulSeriesSC(tensorData_1=tensor1, tensorData_2=tensor2, SobolSeq1=tuples[0], SobolSeq2=tuples[1],AscendingSeq=ascendingSeq,
                                                    dataWidth=dataWidth, device=device)
            accurateRes= tensor1 * tensor2
            SC_RED =    abs(1 - (SCResult.to(torch.float64) / accurateRes.to(torch.float64)))
            Unary_RED = abs(1 - (UnaryResult.to(torch.float64) / accurateRes.to(torch.float64)))
            SC_ED =    abs(SCResult.to(torch.float64) - accurateRes.to(torch.float64))/AED_base
            Unary_ED = abs(UnaryResult.to(torch.float64) - accurateRes.to(torch.float64)) /AED_base

            SC_REDsum += SC_RED
            SC_AEDsum += SC_ED

            Unary_REDsum += Unary_RED
            Unary_AEDsum += Unary_ED
            # print(i)
            # if(i==63):
            #     print(1)
        SC_RED = torch.sum(SC_REDsum)/(dim*dim)
        SC_ED = torch.sum (SC_AEDsum)/(dim*dim)
        Unary_RED = torch.sum(Unary_REDsum) / (dim * dim)
        Unary_ED = torch.sum(Unary_AEDsum) / (dim * dim)
        MREDGroup.append((SC_RED,Unary_RED))
        MEDGroup.append((SC_ED, Unary_ED))
    print(MREDGroup)
    print(MEDGroup)
    length = len(SeqType[0][0])
    dir_name = "Result"

    if not os.path.exists(dir_name):
        os.mkdir(dir_name)

    fileName = dir_name+'/dataWidth_'+str(dataWidth)+"_"+str(length)+'_bitstream.txt'
    file = open(fileName, mode='w+')
    file.write("MRED:\n")
    for data in MREDGroup:
        writeLine = ("\t"+str(data[0].item()) +","+str(data[1].item())+"\n" )
        file.write(writeLine)
    file.write("MED:\n")
    for data in MEDGroup:
        writeLine = ("\t"+str(data[0].item()) +","+str(data[1].item()) +"\n")
        file.write(writeLine)
    file.close()


#
if __name__ == "__main__":
    lines_as_lists = []
    # 打开文件，假设文件名为data.txt
    with open('SobolSequence/sobol32.txt', 'r') as file:
        # 逐行读取文件
        for line in file:
            # 去掉行尾的换行符，并按逗号分割字符串，得到一个字符串列表
            str_numbers = line.strip().split(',')

            # 将字符串列表中的每个元素转换为整数，得到一个整数列表
            int_list = [int(num) for num in str_numbers]

            # 将整数列表添加到lines_as_lists列表中
            lines_as_lists.append(int_list)
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    sobol_16_1 = [0,8,12,4,6,14,10,2,3,11,15,7,5,13,9,1]
    sobol_16_2 = [0,8,4,12,6,14,2,10,5,13,1,9,3,11,7,15]
    sobol_16_3 = [0,8,4,12,10,2,14,6,15,7,11,3,5,13,1,9]
    sobol_16_4 = [0,8,4,12,14,6,10,2,7,15,3,11,9,1,13,5]
    sobol_16_5 = [0,8,12,4,6,14,10,2,9,1,5,13,15,7,3,11]
    sobol_16_6 = [0,8,12,4,2,10,14,6,5,13,9,1,7,15,11,3]
    sobol_16_7 = [0,8,4,12,6,14,2,10,7,15,3,11,1,9,5,13]
    sobol_16_8 = [0,8,12,4,14,6,2,10,15,7,3,11,1,9,13,5]
    sobol_32_1 = [0,16,24,8,12,28,20,4,6,22,30,14,10,26,18,2,3,19,27,11,15,31,23,7,5,21,29,13,9,25,17,1]
    sobol_32_2 = [0,16,8,24,12,28,4,20,10,26,2,18,6,22,14,30,15,31,7,23,3,19,11,27,5,21,13,29,9,25,1,17]
    sobol_32_3 = [0,16,8,24,20,4,28,12,30,14,22,6,10,26,2,18,15,31,7,23,27,11,19,3,17,1,25,9,5,21,13,29]
    sobol_32_4 = [0,16,8,24,28,12,20,4,14,30,6,22,18,2,26,10,21,5,29,13,9,25,1,17,27,11,19,3,7,23,15,31]
    sobol_32_5 = [0,16,24,8,12,28,20,4,18,2,10,26,30,14,6,22,9,25,17,1,5,21,29,13,27,11,3,19,23,7,15,31]
    sobol_32_6 = [0,16,24,8,4,20,28,12,10,26,18,2,14,30,22,6,31,15,7,23,27,11,3,19,21,5,13,29,17,1,9,25]
    sobol_32_7 = [0,16,8,24,12,28,4,20,14,30,6,22,2,18,10,26,17,1,25,9,29,13,21,5,31,15,23,7,19,3,27,11]
    sobol_32_8 = [0,16,24,8,28,12,4,20,30,14,6,22,2,18,26,10,27,11,3,19,7,23,31,15,5,21,29,13,25,9,1,17]

    sobol_64_1 = [0,32,48,16,24,56,40,8,12,44,60,28,20,52,36,4,6,38,54,22,30,62,46,14,10,42,58,26,18,50,34,2 ,3,35,51,19,27,59,43,11,15,47,63,31,23,55,39,7,5,37,53,21,29,61,45,13,9,41,57,25,17,49,33,1]
    sobol_64_2 = [0,32,16,48,24,56,8,40,20,52,4,36,12,44,28,60,30,62,14,46,6,38,22,54,10,42,26,58,18,50,2,34 ,17,49,1,33,9,41,25,57,5,37,21,53,29,61,13,45,15,47,31,63,23,55,7,39,27,59,11,43,3,35,19,51]
    sobol_64_3 = [0,32,16,48,40,8,56,24,60,28,44,12,20,52,4,36,30,62,14,46,54,22,38,6,34,2,50,18,10,42,26,58 ,45,13,61,29,5,37,21,53,17,49,1,33,57,25,41,9,51,19,35,3,27,59,11,43,15,47,31,63,39,7,55,23]
    sobol_64_4 = [0,32,16,48,56,24,40,8,28,60,12,44,36,4,52,20,42,10,58,26,18,50,2,34,54,22,38,6,14,46,30,62 ,35,3,51,19,27,59,11,43,63,31,47,15,7,39,23,55,9,41,25,57,49,17,33,1,21,53,5,37,45,13,61,29]
    sobol_64_5 = [0,32,48,16,24,56,40,8,36,4,20,52,60,28,12,44,18,50,34,2,10,42,58,26,54,22,6,38,46,14,30,62 ,9,41,57,25,17,49,33,1,45,13,29,61,53,21,5,37,27,59,43,11,3,35,51,19,63,31,15,47,39,7,23,55]
    sobol_64_6 = [0,32,48,16,8,40,56,24,20,52,36,4,28,60,44,12,62,30,14,46,54,22,6,38,42,10,26,58,34,2,18,50 ,59,27,11,43,51,19,3,35,47,15,31,63,39,7,23,55,5,37,53,21,13,45,61,29,17,49,33,1,25,57,41,9]
    sobol_64_7 = [0,32,16,48,24,56,8,40,28,60,12,44,4,36,20,52,34,2,50,18,58,26,42,10,62,30,46,14,38,6,54,22 ,51,19,35,3,43,11,59,27,47,15,63,31,55,23,39,7,17,49,1,33,9,41,25,57,13,45,29,61,21,53,5,37]
    sobol_64_8 = [0,32,48,16,56,24,8,40,60,28,12,44,4,36,52,20,54,22,6,38,14,46,62,30,10,42,58,26,50,18,2,34 ,43,11,27,59,19,51,35,3,23,55,39,7,47,15,31,63,29,61,45,13,37,5,21,53,33,1,17,49,25,57,41,9]

    sobol_128_1 = [0, 64, 96, 32, 48, 112, 80, 16, 24, 88, 120, 56, 40, 104, 72, 8, 12, 76, 108, 44, 60, 124, 92, 28, 20,
                  84, 116, 52, 36, 100, 68, 4, 6, 70, 102, 38, 54, 118, 86, 22, 30, 94, 126, 62, 46, 110, 78, 14, 10,
                  74, 106, 42, 58, 122, 90, 26, 18, 82, 114, 50, 34, 98, 66, 2, 3, 67, 99, 35, 51, 115, 83, 19, 27, 91,
                  123, 59, 43, 107, 75, 11, 15, 79, 111, 47, 63, 127, 95, 31, 23, 87, 119, 55, 39, 103, 71, 7, 5, 69,
                  101, 37, 53, 117, 85, 21, 29, 93, 125, 61, 45, 109, 77, 13, 9, 73, 105, 41, 57, 121, 89, 25, 17, 81,
                  113, 49, 33, 97, 65, 1]
    sobol_128_2 = [0, 64, 32, 96, 48, 112, 16, 80, 40, 104, 8, 72, 24, 88, 56, 120, 60, 124, 28, 92, 12, 76, 44, 108, 20,
                  84, 52, 116, 36, 100, 4, 68, 34, 98, 2, 66, 18, 82, 50, 114, 10, 74, 42, 106, 58, 122, 26, 90, 30, 94,
                  62, 126, 46, 110, 14, 78, 54, 118, 22, 86, 6, 70, 38, 102, 51, 115, 19, 83, 3, 67, 35, 99, 27, 91, 59,
                  123, 43, 107, 11, 75, 15, 79, 47, 111, 63, 127, 31, 95, 39, 103, 7, 71, 23, 87, 55, 119, 17, 81, 49,
                  113, 33, 97, 1, 65, 57, 121, 25, 89, 9, 73, 41, 105, 45, 109, 13, 77, 29, 93, 61, 125, 5, 69, 37, 101,
                  53, 117, 21, 85]
    sobol_128_3 = [0, 64, 32, 96, 80, 16, 112, 48, 120, 56, 88, 24, 40, 104, 8, 72, 60, 124, 28, 92, 108, 44, 76, 12, 68,
                  4, 100, 36, 20, 84, 52, 116, 90, 26, 122, 58, 10, 74, 42, 106, 34, 98, 2, 66, 114, 50, 82, 18, 102,
                  38, 70, 6, 54, 118, 22, 86, 30, 94, 62, 126, 78, 14, 110, 46, 105, 41, 73, 9, 57, 121, 25, 89, 17, 81,
                  49, 113, 65, 1, 97, 33, 85, 21, 117, 53, 5, 69, 37, 101, 45, 109, 13, 77, 125, 61, 93, 29, 51, 115,
                  19, 83, 99, 35, 67, 3, 75, 11, 107, 43, 27, 91, 59, 123, 15, 79, 47, 111, 95, 31, 127, 63, 119, 55,
                  87, 23, 39, 103, 7, 71]
    sobol_128_4 = [0, 64, 32, 96, 112, 48, 80, 16, 56, 120, 24, 88, 72, 8, 104, 40, 84, 20, 116, 52, 36, 100, 4, 68, 108,
                  44, 76, 12, 28, 92, 60, 124, 70, 6, 102, 38, 54, 118, 22, 86, 126, 62, 94, 30, 14, 78, 46, 110, 18,
                  82, 50, 114, 98, 34, 66, 2, 42, 106, 10, 74, 90, 26, 122, 58, 107, 43, 75, 11, 27, 91, 59, 123, 83,
                  19, 115, 51, 35, 99, 3, 67, 63, 127, 31, 95, 79, 15, 111, 47, 7, 71, 39, 103, 119, 55, 87, 23, 45,
                  109, 13, 77, 93, 29, 125, 61, 21, 85, 53, 117, 101, 37, 69, 5, 121, 57, 89, 25, 9, 73, 41, 105, 65, 1,
                  97, 33, 49, 113, 17, 81]
    sobol_128_5 = [0, 64, 96, 32, 48, 112, 80, 16, 72, 8, 40, 104, 120, 56, 24, 88, 36, 100, 68, 4, 20, 84, 116, 52, 108,
                  44, 12, 76, 92, 28, 60, 124, 18, 82, 114, 50, 34, 98, 66, 2, 90, 26, 58, 122, 106, 42, 10, 74, 54,
                  118, 86, 22, 6, 70, 102, 38, 126, 62, 30, 94, 78, 14, 46, 110, 83, 19, 51, 115, 99, 35, 3, 67, 27, 91,
                  123, 59, 43, 107, 75, 11, 119, 55, 23, 87, 71, 7, 39, 103, 63, 127, 95, 31, 15, 79, 111, 47, 65, 1,
                  33, 97, 113, 49, 17, 81, 9, 73, 105, 41, 57, 121, 89, 25, 101, 37, 5, 69, 85, 21, 53, 117, 45, 109,
                  77, 13, 29, 93, 125, 61]
    sobol_128_6 = [0, 64, 96, 32, 16, 80, 112, 48, 40, 104, 72, 8, 56, 120, 88, 24, 124, 60, 28, 92, 108, 44, 12, 76, 84,
                  20, 52, 116, 68, 4, 36, 100, 118, 54, 22, 86, 102, 38, 6, 70, 94, 30, 62, 126, 78, 14, 46, 110, 10,
                  74, 106, 42, 26, 90, 122, 58, 34, 98, 66, 2, 50, 114, 82, 18, 57, 121, 89, 25, 41, 105, 73, 9, 17, 81,
                  113, 49, 1, 65, 97, 33, 69, 5, 37, 101, 85, 21, 53, 117, 109, 45, 13, 77, 125, 61, 29, 93, 79, 15, 47,
                  111, 95, 31, 63, 127, 103, 39, 7, 71, 119, 55, 23, 87, 51, 115, 83, 19, 35, 99, 67, 3, 27, 91, 123,
                  59, 11, 75, 107, 43]
    sobol_128_7 = [0, 64, 32, 96, 48, 112, 16, 80, 56, 120, 24, 88, 8, 72, 40, 104, 68, 4, 100, 36, 116, 52, 84, 20, 124,
                  60, 92, 28, 76, 12, 108, 44, 102, 38, 70, 6, 86, 22, 118, 54, 94, 30, 126, 62, 110, 46, 78, 14, 34,
                  98, 2, 66, 18, 82, 50, 114, 26, 90, 58, 122, 42, 106, 10, 74, 85, 21, 117, 53, 101, 37, 69, 5, 109,
                  45, 77, 13, 93, 29, 125, 61, 17, 81, 49, 113, 33, 97, 1, 65, 41, 105, 9, 73, 25, 89, 57, 121, 51, 115,
                  19, 83, 3, 67, 35, 99, 11, 75, 43, 107, 59, 123, 27, 91, 119, 55, 87, 23, 71, 7, 103, 39, 79, 15, 111,
                  47, 127, 63, 95, 31]
    sobol_128_8 = [0, 64, 96, 32, 112, 48, 16, 80, 120, 56, 24, 88, 8, 72, 104, 40, 108, 44, 12, 76, 28, 92, 124, 60, 20,
                  84, 116, 52, 100, 36, 4, 68, 86, 22, 54, 118, 38, 102, 70, 6, 46, 110, 78, 14, 94, 30, 62, 126, 58,
                  122, 90, 26, 74, 10, 42, 106, 66, 2, 34, 98, 50, 114, 82, 18, 27, 91, 123, 59, 107, 43, 11, 75, 99,
                  35, 3, 67, 19, 83, 115, 51, 119, 55, 23, 87, 7, 71, 103, 39, 15, 79, 111, 47, 127, 63, 31, 95, 77, 13,
                  45, 109, 61, 125, 93, 29, 53, 117, 85, 21, 69, 5, 37, 101, 33, 97, 65, 1, 81, 17, 49, 113, 89, 25, 57,
                  121, 41, 105, 73, 9]

    sobol_256_1 = [0, 128, 192, 64, 96, 224, 160, 32, 48, 176, 240, 112, 80, 208, 144, 16, 24, 152, 216, 88, 120, 248,
                   184, 56, 40, 168, 232, 104, 72, 200, 136, 8, 12, 140, 204, 76, 108, 236, 172, 44, 60, 188, 252, 124,
                   92, 220, 156, 28, 20, 148, 212, 84, 116, 244, 180, 52, 36, 164, 228, 100, 68, 196, 132, 4, 6, 134,
                   198, 70, 102, 230, 166, 38, 54, 182, 246, 118, 86, 214, 150, 22, 30, 158, 222, 94, 126, 254, 190, 62,
                   46, 174, 238, 110, 78, 206, 142, 14, 10, 138, 202, 74, 106, 234, 170, 42, 58, 186, 250, 122, 90, 218,
                   154, 26, 18, 146, 210, 82, 114, 242, 178, 50, 34, 162, 226, 98, 66, 194, 130, 2, 3, 131, 195, 67, 99,
                   227, 163, 35, 51, 179, 243, 115, 83, 211, 147, 19, 27, 155, 219, 91, 123, 251, 187, 59, 43, 171, 235,
                   107, 75, 203, 139, 11, 15, 143, 207, 79, 111, 239, 175, 47, 63, 191, 255, 127, 95, 223, 159, 31, 23,
                   151, 215, 87, 119, 247, 183, 55, 39, 167, 231, 103, 71, 199, 135, 7, 5, 133, 197, 69, 101, 229, 165,
                   37, 53, 181, 245, 117, 85, 213, 149, 21, 29, 157, 221, 93, 125, 253, 189, 61, 45, 173, 237, 109, 77,
                   205, 141, 13, 9, 137, 201, 73, 105, 233, 169, 41, 57, 185, 249, 121, 89, 217, 153, 25, 17, 145, 209,
                   81, 113, 241, 177, 49, 33, 161, 225, 97, 65, 193, 129, 1]
    sobol_256_2 = [0, 128, 64, 192, 96, 224, 32, 160, 80, 208, 16, 144, 48, 176, 112, 240, 120, 248, 56, 184, 24, 152,
                   88, 216, 40, 168, 104, 232, 72, 200, 8, 136, 68, 196, 4, 132, 36, 164, 100, 228, 20, 148, 84, 212,
                   116, 244, 52, 180, 60, 188, 124, 252, 92, 220, 28, 156, 108, 236, 44, 172, 12, 140, 76, 204, 102,
                   230, 38, 166, 6, 134, 70, 198, 54, 182, 118, 246, 86, 214, 22, 150, 30, 158, 94, 222, 126, 254, 62,
                   190, 78, 206, 14, 142, 46, 174, 110, 238, 34, 162, 98, 226, 66, 194, 2, 130, 114, 242, 50, 178, 18,
                   146, 82, 210, 90, 218, 26, 154, 58, 186, 122, 250, 10, 138, 74, 202, 106, 234, 42, 170, 85, 213, 21,
                   149, 53, 181, 117, 245, 5, 133, 69, 197, 101, 229, 37, 165, 45, 173, 109, 237, 77, 205, 13, 141, 125,
                   253, 61, 189, 29, 157, 93, 221, 17, 145, 81, 209, 113, 241, 49, 177, 65, 193, 1, 129, 33, 161, 97,
                   225, 105, 233, 41, 169, 9, 137, 73, 201, 57, 185, 121, 249, 89, 217, 25, 153, 51, 179, 115, 243, 83,
                   211, 19, 147, 99, 227, 35, 163, 3, 131, 67, 195, 75, 203, 11, 139, 43, 171, 107, 235, 27, 155, 91,
                   219, 123, 251, 59, 187, 119, 247, 55, 183, 23, 151, 87, 215, 39, 167, 103, 231, 71, 199, 7, 135, 15,
                   143, 79, 207, 111, 239, 47, 175, 95, 223, 31, 159, 63, 191, 127, 255]
    sobol_256_3 = [0, 128, 64, 192, 160, 32, 224, 96, 240, 112, 176, 48, 80, 208, 16, 144, 120, 248, 56, 184, 216, 88,
                   152, 24, 136, 8, 200, 72, 40, 168, 104, 232, 180, 52, 244, 116, 20, 148, 84, 212, 68, 196, 4, 132,
                   228, 100, 164, 36, 204, 76, 140, 12, 108, 236, 44, 172, 60, 188, 124, 252, 156, 28, 220, 92, 210, 82,
                   146, 18, 114, 242, 50, 178, 34, 162, 98, 226, 130, 2, 194, 66, 170, 42, 234, 106, 10, 138, 74, 202,
                   90, 218, 26, 154, 250, 122, 186, 58, 102, 230, 38, 166, 198, 70, 134, 6, 150, 22, 214, 86, 54, 182,
                   118, 246, 30, 158, 94, 222, 190, 62, 254, 126, 238, 110, 174, 46, 78, 206, 14, 142, 75, 203, 11, 139,
                   235, 107, 171, 43, 187, 59, 251, 123, 27, 155, 91, 219, 51, 179, 115, 243, 147, 19, 211, 83, 195, 67,
                   131, 3, 99, 227, 35, 163, 255, 127, 191, 63, 95, 223, 31, 159, 15, 143, 79, 207, 175, 47, 239, 111,
                   135, 7, 199, 71, 39, 167, 103, 231, 119, 247, 55, 183, 215, 87, 151, 23, 153, 25, 217, 89, 57, 185,
                   121, 249, 105, 233, 41, 169, 201, 73, 137, 9, 225, 97, 161, 33, 65, 193, 1, 129, 17, 145, 81, 209,
                   177, 49, 241, 113, 45, 173, 109, 237, 141, 13, 205, 77, 221, 93, 157, 29, 125, 253, 61, 189, 85, 213,
                   21, 149, 245, 117, 181, 53, 165, 37, 229, 101, 5, 133, 69, 197]
    sobol_256_4 = [0, 128, 64, 192, 224, 96, 160, 32, 112, 240, 48, 176, 144, 16, 208, 80, 168, 40, 232, 104, 72, 200,
                   8, 136, 216, 88, 152, 24, 56, 184, 120, 248, 140, 12, 204, 76, 108, 236, 44, 172, 252, 124, 188, 60,
                   28, 156, 92, 220, 36, 164, 100, 228, 196, 68, 132, 4, 84, 212, 20, 148, 180, 52, 244, 116, 214, 86,
                   150, 22, 54, 182, 118, 246, 166, 38, 230, 102, 70, 198, 6, 134, 126, 254, 62, 190, 158, 30, 222, 94,
                   14, 142, 78, 206, 238, 110, 174, 46, 90, 218, 26, 154, 186, 58, 250, 122, 42, 170, 106, 234, 202, 74,
                   138, 10, 242, 114, 178, 50, 18, 146, 82, 210, 130, 2, 194, 66, 98, 226, 34, 162, 49, 177, 113, 241,
                   209, 81, 145, 17, 65, 193, 1, 129, 161, 33, 225, 97, 153, 25, 217, 89, 121, 249, 57, 185, 233, 105,
                   169, 41, 9, 137, 73, 201, 189, 61, 253, 125, 93, 221, 29, 157, 205, 77, 141, 13, 45, 173, 109, 237,
                   21, 149, 85, 213, 245, 117, 181, 53, 101, 229, 37, 165, 133, 5, 197, 69, 231, 103, 167, 39, 7, 135,
                   71, 199, 151, 23, 215, 87, 119, 247, 55, 183, 79, 207, 15, 143, 175, 47, 239, 111, 63, 191, 127, 255,
                   223, 95, 159, 31, 107, 235, 43, 171, 139, 11, 203, 75, 27, 155, 91, 219, 251, 123, 187, 59, 195, 67,
                   131, 3, 35, 163, 99, 227, 179, 51, 243, 115, 83, 211, 19, 147]
    sobol_256_5 = [0, 128, 192, 64, 96, 224, 160, 32, 144, 16, 80, 208, 240, 112, 48, 176, 72, 200, 136, 8, 40, 168,
                   232, 104, 216, 88, 24, 152, 184, 56, 120, 248, 36, 164, 228, 100, 68, 196, 132, 4, 180, 52, 116, 244,
                   212, 84, 20, 148, 108, 236, 172, 44, 12, 140, 204, 76, 252, 124, 60, 188, 156, 28, 92, 220, 166, 38,
                   102, 230, 198, 70, 6, 134, 54, 182, 246, 118, 86, 214, 150, 22, 238, 110, 46, 174, 142, 14, 78, 206,
                   126, 254, 190, 62, 30, 158, 222, 94, 130, 2, 66, 194, 226, 98, 34, 162, 18, 146, 210, 82, 114, 242,
                   178, 50, 202, 74, 10, 138, 170, 42, 106, 234, 90, 218, 154, 26, 58, 186, 250, 122, 231, 103, 39, 167,
                   135, 7, 71, 199, 119, 247, 183, 55, 23, 151, 215, 87, 175, 47, 111, 239, 207, 79, 15, 143, 63, 191,
                   255, 127, 95, 223, 159, 31, 195, 67, 3, 131, 163, 35, 99, 227, 83, 211, 147, 19, 51, 179, 243, 115,
                   139, 11, 75, 203, 235, 107, 43, 171, 27, 155, 219, 91, 123, 251, 187, 59, 65, 193, 129, 1, 33, 161,
                   225, 97, 209, 81, 17, 145, 177, 49, 113, 241, 9, 137, 201, 73, 105, 233, 169, 41, 153, 25, 89, 217,
                   249, 121, 57, 185, 101, 229, 165, 37, 5, 133, 197, 69, 245, 117, 53, 181, 149, 21, 85, 213, 45, 173,
                   237, 109, 77, 205, 141, 13, 189, 61, 125, 253, 221, 93, 29, 157]
    sobol_256_6 = [0, 128, 192, 64, 32, 160, 224, 96, 80, 208, 144, 16, 112, 240, 176, 48, 248, 120, 56, 184, 216, 88,
                   24, 152, 168, 40, 104, 232, 136, 8, 72, 200, 236, 108, 44, 172, 204, 76, 12, 140, 188, 60, 124, 252,
                   156, 28, 92, 220, 20, 148, 212, 84, 52, 180, 244, 116, 68, 196, 132, 4, 100, 228, 164, 36, 114, 242,
                   178, 50, 82, 210, 146, 18, 34, 162, 226, 98, 2, 130, 194, 66, 138, 10, 74, 202, 170, 42, 106, 234,
                   218, 90, 26, 154, 250, 122, 58, 186, 158, 30, 94, 222, 190, 62, 126, 254, 206, 78, 14, 142, 238, 110,
                   46, 174, 102, 230, 166, 38, 70, 198, 134, 6, 54, 182, 246, 118, 22, 150, 214, 86, 173, 45, 109, 237,
                   141, 13, 77, 205, 253, 125, 61, 189, 221, 93, 29, 157, 85, 213, 149, 21, 117, 245, 181, 53, 5, 133,
                   197, 69, 37, 165, 229, 101, 65, 193, 129, 1, 97, 225, 161, 33, 17, 145, 209, 81, 49, 177, 241, 113,
                   185, 57, 121, 249, 153, 25, 89, 217, 233, 105, 41, 169, 201, 73, 9, 137, 223, 95, 31, 159, 255, 127,
                   63, 191, 143, 15, 79, 207, 175, 47, 111, 239, 39, 167, 231, 103, 7, 135, 199, 71, 119, 247, 183, 55,
                   87, 215, 151, 23, 51, 179, 243, 115, 19, 147, 211, 83, 99, 227, 163, 35, 67, 195, 131, 3, 203, 75,
                   11, 139, 235, 107, 43, 171, 155, 27, 91, 219, 187, 59, 123, 251]
    sobol_256_7 = [0, 128, 64, 192, 96, 224, 32, 160, 112, 240, 48, 176, 16, 144, 80, 208, 136, 8, 200, 72, 232, 104,
                   168, 40, 248, 120, 184, 56, 152, 24, 216, 88, 204, 76, 140, 12, 172, 44, 236, 108, 188, 60, 252, 124,
                   220, 92, 156, 28, 68, 196, 4, 132, 36, 164, 100, 228, 52, 180, 116, 244, 84, 212, 20, 148, 170, 42,
                   234, 106, 202, 74, 138, 10, 218, 90, 154, 26, 186, 58, 250, 122, 34, 162, 98, 226, 66, 194, 2, 130,
                   82, 210, 18, 146, 50, 178, 114, 242, 102, 230, 38, 166, 6, 134, 70, 198, 22, 150, 86, 214, 118, 246,
                   54, 182, 238, 110, 174, 46, 142, 14, 206, 78, 158, 30, 222, 94, 254, 126, 190, 62, 221, 93, 157, 29,
                   189, 61, 253, 125, 173, 45, 237, 109, 205, 77, 141, 13, 85, 213, 21, 149, 53, 181, 117, 245, 37, 165,
                   101, 229, 69, 197, 5, 133, 17, 145, 81, 209, 113, 241, 49, 177, 97, 225, 33, 161, 1, 129, 65, 193,
                   153, 25, 217, 89, 249, 121, 185, 57, 233, 105, 169, 41, 137, 9, 201, 73, 119, 247, 55, 183, 23, 151,
                   87, 215, 7, 135, 71, 199, 103, 231, 39, 167, 255, 127, 191, 63, 159, 31, 223, 95, 143, 15, 207, 79,
                   239, 111, 175, 47, 187, 59, 251, 123, 219, 91, 155, 27, 203, 75, 139, 11, 171, 43, 235, 107, 51, 179,
                   115, 243, 83, 211, 19, 147, 67, 195, 3, 131, 35, 163, 99, 227]
    sobol_256_8 = [0, 128, 192, 64, 224, 96, 32, 160, 240, 112, 48, 176, 16, 144, 208, 80, 216, 88, 24, 152, 56, 184,
                   248, 120, 40, 168, 232, 104, 200, 72, 8, 136, 172, 44, 108, 236, 76, 204, 140, 12, 92, 220, 156, 28,
                   188, 60, 124, 252, 116, 244, 180, 52, 148, 20, 84, 212, 132, 4, 68, 196, 100, 228, 164, 36, 54, 182,
                   246, 118, 214, 86, 22, 150, 198, 70, 6, 134, 38, 166, 230, 102, 238, 110, 46, 174, 14, 142, 206, 78,
                   30, 158, 222, 94, 254, 126, 62, 190, 154, 26, 90, 218, 122, 250, 186, 58, 106, 234, 170, 42, 138, 10,
                   74, 202, 66, 194, 130, 2, 162, 34, 98, 226, 178, 50, 114, 242, 82, 210, 146, 18, 63, 191, 255, 127,
                   223, 95, 31, 159, 207, 79, 15, 143, 47, 175, 239, 111, 231, 103, 39, 167, 7, 135, 199, 71, 23, 151,
                   215, 87, 247, 119, 55, 183, 147, 19, 83, 211, 115, 243, 179, 51, 99, 227, 163, 35, 131, 3, 67, 195,
                   75, 203, 139, 11, 171, 43, 107, 235, 187, 59, 123, 251, 91, 219, 155, 27, 9, 137, 201, 73, 233, 105,
                   41, 169, 249, 121, 57, 185, 25, 153, 217, 89, 209, 81, 17, 145, 49, 177, 241, 113, 33, 161, 225, 97,
                   193, 65, 1, 129, 165, 37, 101, 229, 69, 197, 133, 5, 85, 213, 149, 21, 181, 53, 117, 245, 125, 253,
                   189, 61, 157, 29, 93, 221, 141, 13, 77, 205, 109, 237, 173, 45]


    # sobolTensor = torch.tensor(sobol_1).to(device)
    dataWidth = 8

    SeqType_16 = [(sobol_16_1,sobol_16_2), (sobol_16_2,sobol_16_3),(sobol_16_3,sobol_16_4),(sobol_16_4,sobol_16_5),(sobol_16_5,sobol_16_6),(sobol_16_6,sobol_16_7),(sobol_16_7,sobol_16_8),(sobol_16_8,sobol_16_3)]
    SeqType_32 = [(sobol_32_1, sobol_32_2), (sobol_32_2, sobol_32_3), (sobol_32_3, sobol_32_4),
                  (sobol_32_4, sobol_32_5), (sobol_32_5, sobol_32_6), (sobol_32_6, sobol_32_7),
                  (sobol_32_7, sobol_32_8), (sobol_32_8, sobol_32_3)]

    SeqType_64 = [(sobol_64_1, sobol_64_2), (sobol_64_2, sobol_64_3), (sobol_64_3, sobol_64_4),
                  (sobol_64_4, sobol_64_5), (sobol_64_5, sobol_64_6), (sobol_64_6, sobol_64_7),
                  (sobol_64_7, sobol_64_8), (sobol_64_8, sobol_64_3)]

    SeqType_128 = [(sobol_128_1, sobol_128_2), (sobol_128_2, sobol_128_3), (sobol_128_3, sobol_128_4),
                   (sobol_128_4, sobol_128_5), (sobol_128_5, sobol_128_6), (sobol_128_6, sobol_128_7),
                   (sobol_128_7, sobol_128_8), (sobol_128_8, sobol_128_3)]
    SeqType_256 = [(sobol_256_1, sobol_256_2), (sobol_256_2, sobol_256_3), (sobol_256_3, sobol_256_4),
                   (sobol_256_4, sobol_256_5), (sobol_256_5, sobol_256_6), (sobol_256_6, sobol_256_7),
                   (sobol_256_7, sobol_256_8), (sobol_256_8, sobol_256_3)]

    allTpye = [SeqType_16,SeqType_32]
    # allTpye = [SeqType_16, SeqType_32,SeqType_64]
    # allTpye = [SeqType_64, SeqType_128 , SeqType_256]

    for types in allTpye:
        calculate(types,dataWidth)



